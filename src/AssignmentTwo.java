import java.util.ArrayList;
import java.util.List;
import java.util.Random;

public class AssignmentTwo {
    public static Random random = new Random();
    public static void main(String[] args) {
        random.setSeed(System.currentTimeMillis());
        //partThree();
        //partFourA();
        //partFourB();
        partFive();
    }
    public static void partThree(){
        Ride ride = new Ride("rollerCoaster",true,null,2,0);
        List<Visitor>visitors = createVisitors(5);
        for(Visitor visitor : visitors)
        {
            ride.addVisitorToQueue(visitor);
        }
        ride.removeVisitorFromQueue(visitors.get(random.nextInt(5)));
        ride.printQueue();
    }

    public static void partFourA(){
        Ride ride = new Ride("rollerCoaster",true,null,2,0);
        //create 10 visitor
        List<Visitor>visitors = createVisitors(10);
        //The first five added to the history
        for(int i = 0; i < 5; i ++)
        {
            ride.addVisitorToHistory(visitors.get(i));
        }
        ride.checkVisitorFromHistory(visitors.get(random.nextInt(10)));
        ride.numberOfVisitors();
        ride.printRideHistory();
    }

    public static void partFourB(){
        Ride ride = new Ride("rollerCoaster",true,null,2,0);
        List<Visitor>visitors = createVisitors(5);
        for(int i = 0; i < 5; i ++)
        {
            ride.addVisitorToHistory(visitors.get(i));
        }
        System.out.println("----------------Before sorting----------------");
        ride.printRideHistory();
        ride.sortVisitorsInHistory();
        System.out.println("----------------After sorting------------------");
        ride.printRideHistory();
    }

    public static void partFive(){
        Ride ride = new Ride("rollerCoaster",true,new Employee(),2,0);
        List<Visitor>visitors = createVisitors(10);
        for(Visitor visitor : visitors)
        {
            ride.addVisitorToQueue(visitor);
        }
        System.out.println("----------------Before run one cycle----------------");
        ride.printQueue();
        ride.runOneCycle();
        System.out.println("----------------After run one cycle----------------");
        ride.printQueue();
        ride.printRideHistory();
    }

    public void partSix(){
    }

    public void partSeven(){
    }

    /**
     * To verify the sorting functionality, the initial order of user names
     * should be changed to be generated by random numbers.
     * @param n
     * @return
     */
    public static List<Visitor> createVisitors(int n)
    {
        List<Visitor> visitorList = new ArrayList<Visitor>();
        for(int i = 0 ; i < n; i++)
        {
            Visitor visitor = new Visitor("ride "+random.nextInt(100),18+i,i % 2 == 0 ? "man":"woman","Full Day Ticket" , true);
            visitorList.add(visitor);
        }

        return visitorList;
    }
}
